(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dom"] = factory();
	else
		root["danehansen"] = root["danehansen"] || {}, root["danehansen"]["dom"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["relativePosition"] = relativePosition;
/* harmony export (immutable) */ __webpack_exports__["cover"] = cover;
// dom manipulation
// dom manipulation
// dom manipulation

/*const FIRST_LETTER = /\b[a-z]/
function _addPrefix(str) {
  let prefixed = _propStorage[str]
  if (prefixed) {
    return prefixed
  }
  prefixed = browser().prefix + str.replace(FIRST_LETTER, _captitalize)
  return prefixed
}

function _captitalize(str) {
  return str.toUpperCase()
}

const _propStorage = {}
export function getStyle(element, property) {
  const { style } = element
  let value = style[property]
  if (value) {
    return value
  }

  const prefixed = _addPrefix(property)
  value = style[prefixed]
  if(value) {
    _propStorage[property] = property
    return value
  }

  value = window.getComputedStyle(element)[property]
  if(value) {
    return value
  }

  _propStorage[property] = prefixed
  return window.getComputedStyle(element)[prefixed]
}

export function getMatrixStyle(element, axis) {
  const transform = getStyle(element, 'transform')
  if (!transform) {
    return 0
  }
  let amount
  if (axis === 'x') {
    amount = transform.split(',')[4]
  } else if (axis === 'y') {
    amount = transform.split(',')[5]
  }
  return amount ? parseFloat(amount) : 0
}*/

function relativePosition(evt, relativeTo = evt.currentTarget) {
  const rect = relativeTo.getBoundingClientRect();
  return {
    x: evt.clientX - rect.left,
    y: evt.clientY - rect.top
  };
}

const COVER_ELEMENTS = [];
const COVER_ASPECTS = [];
function cover(content, frame) {
  let index = COVER_ELEMENTS.indexOf(content);
  if (index < 0) {
    COVER_ELEMENTS.push(content);
    COVER_ASPECTS.push(content.offsetWidth / content.offsetHeight);
    index = COVER_ELEMENTS.indexOf(content);
  }
  const contentRatio = COVER_ASPECTS[index];
  const frameWidth = frame.offsetWidth;
  const frameHeight = frame.offsetHeight;
  const frameRatio = frameWidth / frameHeight;
  const { style } = content;
  if (frameRatio) {
    if (contentRatio > frameRatio) {
      const newWidth = frameHeight * contentRatio;
      style.width = `${newWidth}px`;
      style.height = `${frameHeight}px`;
      style.left = `${-(newWidth - frameWidth) / 2}px`;
      style.top = 0;
    } else {
      const newHeight = frameWidth / contentRatio;
      style.width = `${frameWidth}px`;
      style.height = `${newHeight}px`;
      style.left = 0;
      style.top = `${-(newHeight - frameHeight) / 2}px`;
    }
  } else {
    setTimeout(function () {
      cover(content, frame);
    }, 1);
  }
}

// browser shit TODO: split this into 2 repos?
// browser shit
// browser shit

/*const URL_VARS = /[?&]+([^=&]+)=([^&]*)/gi
export function getURLVars() {
  const vars = {}
  const parts = window.location.href.replace(URL_VARS, function(m, key, value) { vars[key] = value })
  return vars
}

/*const DEFAULT_BROWSER = {
  android: false,
  ios: false,
  mobile: false,
  name: '',
  phone: false,
  prefix: '',
  tablet: false,
  version: 0,
  webkit: false,
}
let _browser
export function browser() {
  if (!_browser) {
    if (typeof window === 'undefined') {
      _browser = DEFAULT_BROWSER
    } else {
      const { userAgent } = window.navigator
      const isChrome = /chrome|crios/i.test(userAgent)
      const isAndroid = /android/i.test(userAgent)
      const isIos = /(ipod|iphone|ipad)/i.test(userAgent)
      const isTablet = /tablet/i.test(userAgent)
      const isMobile = isTablet || isAndroid || isIos
      const isPhone = !isTablet && /[^-]mobi/i.test(userAgent)

      if (isChrome) { // chrome
        _browser = {
          name: 'chrome',
          version: parseFloat(userAgent.match(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)[1]),
          webkit: true,
          prefix: 'webkit'
        }
      } else if (/firefox/i.test(userAgent)) { // firefox
        _browser = {
          name: 'firefox',
          version: parseFloat(userAgent.match(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i)[1]),
          webkit: false,
          prefix: 'moz'
        }
      } else if (/safari/i.test(userAgent) && !chrome && !/phantom/i.test(userAgent)) { // safari
        _browser = {
          name: 'safari',
          version: parseFloat(userAgent.match(/version\/(\d+(\.\d+)?)/i)[2]),
          webkit: true,
          prefix: 'webkit'
        }
      } else if (/(msie|trident)/i.test(userAgent)) { // ie
        _browser = {
          name: 'msie',
          version: parseFloat(userAgent.match(/(?:msie |rv:)(\d+(\.\d+)?)/i)[2]),
          webkit: false,
          prefix: 'ms'
        }
      } else {
        _browser = DEFAULT_BROWSER
      }

      _browser.android = isAndroid
      _browser.ios = isIos
      _browser.tablet = isTablet
      _browser.mobile = isMobile
      _browser.phone = isPhone
    }
    Object.freeze(_browser)
  }

  return _browser
}


/*let _touch
export function touch() {
  if (_touch === undefined) {
    if (typeof window === 'undefined') {
      _touch = false
    } else {
      _touch = 'ontouchstart' in window
    }
  }
  return _touch
}

/*export function deviceOrientation(evt, ref) {
  let { gamma } = evt
  if (gamma) {
    if (!ref) {
      ref = evt
    }
    const { orientation } = window
    gamma -= ref.gamma
    if (gamma < -180) {
      gamma += 360
    }
    gamma = _unadjust(gamma)
    gamma /= 90
    let beta = _adjustBeta(evt)
    const refBeta = _adjustBeta(ref)
    beta -= refBeta
    if (beta < -180) {
      beta += 360
    }
    beta = _unadjust(beta)
    beta /= 90
    let alpha = evt.alpha - ref.alpha
    if (alpha < 0) {
      alpha += 360
    }
    alpha = (alpha + orientation) / 90
    if (alpha < 2) {
      if (alpha > 1) {
        alpha = 2 - alpha
      }
      alpha *= -1
    } else {
      if (alpha < 3) {
        alpha -= 2
      } else {
        alpha = 4 - alpha
      }
    }
    if (Math.abs(orientation) == 90) {
      const a = gamma
      gamma = beta
      beta = a
    }
    if (orientation < 0) {
      gamma = -gamma
      beta = -beta
    }
    return {
      x: gamma,
      y: beta,
      z: alpha,
    }
  }
}

function _adjustBeta(evt) {
  let { beta } = evt
  const { gamma } = evt
  if (gamma > 90) {
    beta = 180 - beta
  } else if (gamma < -90) {
    beta = -180 - beta
  }
  return beta
}

function _unadjust(num) {
  if (num > 90) {
    num = 180 - num
  } else if (num < -90) {
    num = -180 - num
  }
  return num
}

export function logObject(obj, name) {
  if (name) {
    console.log(name)
  }
  console.log('{')
  for (let i in obj) {
    console.log(` ${i}: ${obj[i]},`)
  }
  console.log('}')
  console.log('')
}*/

/***/ })
/******/ ]);
});